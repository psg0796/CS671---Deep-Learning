# -*- coding: utf-8 -*-
"""DL_ASSIGNMENT_3_TASK_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oFv-dHoCowEvvbOD9IAj0GNoS_Md6Jdk
"""
import tensorflow as tf
import numpy as np
import os
import dataGenerator
import sys, getopt
import prediction

x_train = np.load("/content/drive/My Drive/deeplearningassign3data/x_train.npy")
x_test = np.load("/content/drive/My Drive/deeplearningassign3data/x_test.npy")

y_test = np.load("/content/drive/My Drive/deeplearningassign3data/y_test.npy")
y_train = np.load("/content/drive/My Drive/deeplearningassign3data/y_train.npy")

from keras.layers import Input, Dense, Conv2D, MaxPooling2D, UpSampling2D
from keras.models import Model
from keras import backend as K
import keras


input_img = Input(shape=(300, 400, 3))  # adapt this if using `channels_first` image data format

x = Conv2D(32, (3, 3), activation='relu', padding='same')(input_img)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = MaxPooling2D((2, 2), padding='same')(x)
x = Conv2D(16, (3, 3), activation='relu', padding='same')(x)
encoded = MaxPooling2D((3, 2), padding='same')(x)

# at this point the representation is (4, 4, 8) i.e. 128-dimensional

x = Conv2D(16, (3, 3), activation='relu', padding='same')(encoded)
x = UpSampling2D((3, 2))(x)
x = Conv2D(16, (3, 3), activation='relu', padding='same')(x)
x = UpSampling2D((2, 2))(x)
x = Conv2D(32, (3, 3), activation='relu',padding = "same")(x)
x = UpSampling2D((2, 2))(x)
decoded = Conv2D(3, (3, 3), activation='sigmoid', padding='same')(x)

autoencoder = Model(input_img, decoded)
#Adadelta= keras.optimizers.Adadelta(lr=0.0000001, beta_1=0.9, beta_2=0.999, epsilon=None, decay=0.0, amsgrad=False)

autoencoder.compile(optimizer="Adadelta", loss="squared_hinge",metrics = ["accuracy"])
autoencoder.summary()



# from keras.callbacks import TensorBoard

autoencoder.fit(x_train, y_train,
                epochs=10,
#                 batch_size=128,
                shuffle =True,
                validation_split = 0.2
               )

autoencoder.save("assignment_3_model")